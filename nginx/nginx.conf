# main nginx file: triages requests between frontend (normal usage) / backend (health checks / development)

user                    nginx; # worker processes run as non-root
worker_processes        auto; # "auto" spawns 1 worker process per cpu core (auto = recommended)
error_log               /var/log/nginx/error.log;  # where errors get written
pid                     /var/run/nginx.pid; # where nginx process sits
worker_rlimit_nofile    100000; #max nr of file descriptors a worker can open (moar = better)

events {
    worker_connections  1024; #max nr of connections a worker can accept (1024 = max = recommended)
}

http {

    # for gunicorn to work https://serverfault.com/questions/490101/how-to-resolve-the-gunicorn-critical-worker-timeout-error?rq=1
    proxy_connect_timeout 300s;
    proxy_read_timeout 300s;

    upstream frontend {
        server frontend:8080; #must match service name/port in docker-compose
    }
    upstream backend {
        server backend:5000; #must match service name/port in docker-compose
    }

    # ------------------------------------------------------------------------------
    # security stuff - https://gist.github.com/plentz/6737338

    # don't send the nginx version number in error pages and Server header
    server_tokens off;

    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    # ------------------------------------------------------------------------------
    # log formats
    log_format  main  '$remote_addr - $remote_user [[$time_local]] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';
    log_format healthd '$msec"$uri"'
            '$status"$request_time"$upstream_response_time"'
            '$http_x_forwarded_for';

    # ------------------------------------------------------------------------------
    # server

    server {
        listen 80;
        # servername only needed if multiple domain names listening - https://serverfault.com/questions/858627/nginx-why-do-i-need-to-specify-a-server-name
        # skipping all SSL config, coz done at ELB level in AWS - otherwise https://gist.github.com/plentz/6737338

        # ------------------------------------------------------------------------------
        # aws logs

        # to solve the log file creation issue need to do:
        # 1) create+chmod+chown healtd folder inside ctr (in Dockerfile)
        # 2) create+chmod+chown healtd folder inside instance (in .ebextensions)
        # 3) change root folder (below) - https://serverfault.com/questions/762801/how-to-use-variables-in-access-log-filename-with-nginx-healthd
        # 4) make sure volume attached to nginx ctr: /var/log/nginx:/var/log/nginx (in docker-compose)
        # 5) when 1) and 2) are done above, then there is NO NEED TO RUN NGINX AS ROOT. hence user nginx on top;
        root /etc/nginx;

        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
            set $year $1;
            set $month $2;
            set $day $3;
            set $hour $4;
        }

        access_log /var/log/nginx/access.log main;
        access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;

        # ------------------------------------------------------------------------------
        # routes

        # send all normal requests to frontend
        location / {
            proxy_pass http://frontend;
            proxy_http_version    1.1;
            proxy_set_header    Upgrade                $http_upgrade;
            proxy_set_header    Connection             "upgrade";
        }

        # requests that start with /backend go to flask
        location /backend {
            #removes the /backend prefix for routes that go to backend
            rewrite /backend/(.*) /$1 break;
            proxy_pass http://backend;
            proxy_http_version    1.1;
            # create a WebSocket - https://nginx.org/en/docs/http/websocket.html
            proxy_set_header    Upgrade                $http_upgrade;
            proxy_set_header    Connection             "upgrade";
            # pass details about client to the server
            proxy_set_header    Host                   $host;
            proxy_set_header    X-Real-IP              $remote_addr;
            proxy_set_header    X-Forwarded-For        $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto      $scheme;
            proxy_set_header    real_client_ip         $http_x_forwarded_for;
        }

        # backend health check for ELB (preferential match)
        location ^~ /health {
            proxy_pass http://backend;
        }
    }
}