name: deploy app

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs: #run in parallel, on a diff runner each
#  clippy:
#    name: clippy
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:13
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: dbpw
#          POSTGRES_DB: solwtf
#        ports:
#          - 5432:5432
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#          components: clippy
#      - name: Migrate database
#        working-directory: ./backend
#        run: |
#          sudo apt-get install libpq-dev -y
#          cargo install --locked --version=0.5.1 sqlx-cli --no-default-features --features postgres
#          SKIP_DOCKER=true scripts/init_db.sh
#      - name: Check sqlx metadata file
#        cargo run sqlx prepare --check -- --bin backend
#      - uses: actions-rs/clippy-check@v1
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          args: --manifest-path ./backend/Cargo.toml -- -D warnings

#  fmt:
#    name: rustfmt
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#          components: rustfmt
#      - uses: actions-rs/cargo@v1
#        with:
#          command: fmt
#          args: --all --manifest-path ./backend/Cargo.toml -- --check

  # https://faun.pub/setting-up-ci-cd-using-docker-aws-ecr-and-github-actions-part-1-66d7dc640e4d
#  build-frontend:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repo code
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        working-directory: frontend
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: sol-frontend
#          IMAGE_TAG: latest
#        run: |
#          # Build a docker container and push it to ECR
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          echo "Pushing image to ECR..."
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#
#  build-nginx:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repo code
#        uses: actions/checkout@v2
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        working-directory: nginx
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: sol-nginx
#          IMAGE_TAG: latest
#        run: |
#          # Build a docker container and push it to ECR
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          echo "Pushing image to ECR..."
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v2

      - name: Create secrets files
        run: |
          mkdir backend/secrets
          touch backend/secrets/twitter.yml
          echo "twitter:" >> backend/secrets/twitter.yml
          echo "  consumer_key: ${{ secrets.TWITTER_CONSUMER_KEY }}" >> backend/secrets/twitter.yml
          echo "  consumer_secret: ${{ secrets.TWITTER_CONSUMER_SECRET }}" >> backend/secrets/twitter.yml
          echo "  access_token: ${{ secrets.TWITTER_ACCESS_TOKEN }}" >> backend/secrets/twitter.yml
          echo "  access_token_secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}" >> backend/secrets/twitter.yml
          echo "  bearer_token: ${{ secrets.TWITTER_BEARER_TOKEN }}" >> backend/secrets/twitter.yml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      #todo build here separately with caching
#      - name: Prepare
#        id: prep
#        run: |
#          TAG=$(echo $GITHUB_SHA | head -c7)
#          IMAGE="backend"
#          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
#          echo ::set-output name=tag::${TAG}

      - name: Set up Docker Buildx
        id: buildx
        # Use the action from the master, as we've seen some inconsistencies with @v1
        # Issue: https://github.com/docker/build-push-action/issues/286
        uses: docker/setup-buildx-action@master
        # Only worked for us with this option on ü§∑‚Äç‚ôÇÔ∏è
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: test
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sol-backend
          IMAGE_TAG: latest
        run: |
          echo image tag is $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build + push production image
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sol-backend
          IMAGE_TAG: latest
        with:
          context: ./backend
          builder: ${{ steps.buildx.outputs.name }}
          file: backend/Dockerfile
          # Set the desired build target here
#          target: deploy
          push: true
          tags: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache


#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


#  deploy:
#    runs-on: ubuntu-latest
##    needs: BuildAndUpload todo
#    steps:
#      - name: Checkout repo code
#        uses: actions/checkout@v2
#
#      - name: Elastic Beanstalk Deployment
#        uses: hmanzur/actions-aws-eb@v1.0.0
#        with:
#          command: 'deploy ${{ secrets.ENVIRONMENT_NAME }}'
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: "us-east-1"
