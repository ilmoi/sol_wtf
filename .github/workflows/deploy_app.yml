name: build-deploy-app

# todo: probably should build w/o pushing BEFORE allowing merge > then push on merge

# trigger on push directly to master (this includes PRs that are successfully approved)
on:
  push:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

#run in parallel, on a diff runner each
jobs:
  # https://faun.pub/setting-up-ci-cd-using-docker-aws-ecr-and-github-actions-part-1-66d7dc640e4d
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sol-frontend
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  build-nginx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sol-nginx
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v2

      - name: Create secrets files
        run: |
          mkdir backend/secrets
          touch backend/secrets/twitter.yml
          echo "twitter:" >> backend/secrets/twitter.yml
          echo "  consumer_key: ${{ secrets.TWITTER_CONSUMER_KEY }}" >> backend/secrets/twitter.yml
          echo "  consumer_secret: ${{ secrets.TWITTER_CONSUMER_SECRET }}" >> backend/secrets/twitter.yml
          echo "  access_token: ${{ secrets.TWITTER_ACCESS_TOKEN }}" >> backend/secrets/twitter.yml
          echo "  access_token_secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}" >> backend/secrets/twitter.yml
          echo "  bearer_token: ${{ secrets.TWITTER_BEARER_TOKEN }}" >> backend/secrets/twitter.yml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build + Push to ECR
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/sol-backend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # ------------------------------------------------------------------------------

  deploy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-nginx, build-backend]
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v2

      # need to clean up other Dockerfiles, otherwise EB won't work properly
      - name: Delete other Dockerfiles
        run: |
          rm -rf backend
          rm -rf frontend
          rm -rf nginx

      - name: Elastic Beanstalk Deployment
        uses: hmanzur/actions-aws-eb@v1.0.0
        with:
          command: 'deploy ${{ secrets.ENVIRONMENT_NAME }}'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
